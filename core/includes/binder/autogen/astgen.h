#pragma once 
/*
THIS IS AN AUTOGENERATED FILE FROM THE METACOMPILER DO NOT MODIFY!
Metacompiler for "TheBinder" language v0.0.1
*/

#include "binder/tokens.h" 

namespace binder::autogen{

class Expr;

class Binary;
class Grouping;
class Literal;
class Unary;

class Visitor{
 public:
	Visitor() = default;
	virtual ~Visitor()=default;
	//interface
	virtual void* acceptBinary(Binary* expr) = 0;
	virtual void* acceptGrouping(Grouping* expr) = 0;
	virtual void* acceptLiteral(Literal* expr) = 0;
	virtual void* acceptUnary(Unary* expr) = 0;

};
class Expr {
 public:
	Expr() = default;
	virtual ~Expr()=default;
	 //interface
	virtual void* accept(Visitor* visitor)=0;
};

class Binary : public Expr
{
public:
	Binary():Expr(){}
	virtual ~Binary()=default;
	Expr* left;
	TOKEN_TYPE op;
	Expr* right;
	void* accept(Visitor* visitor) override
	{ 
 		return visitor->acceptBinary(this);

	};
};

class Grouping : public Expr
{
public:
	Grouping():Expr(){}
	virtual ~Grouping()=default;
	Expr* expr;
	void* accept(Visitor* visitor) override
	{ 
 		return visitor->acceptGrouping(this);

	};
};

class Literal : public Expr
{
public:
	Literal():Expr(){}
	virtual ~Literal()=default;
	TOKEN_TYPE type;
	const char* value;
	void* accept(Visitor* visitor) override
	{ 
 		return visitor->acceptLiteral(this);

	};
};

class Unary : public Expr
{
public:
	Unary():Expr(){}
	virtual ~Unary()=default;
	TOKEN_TYPE op;
	Expr* right;
	void* accept(Visitor* visitor) override
	{ 
 		return visitor->acceptUnary(this);

	};
};


}// namespace binder::autogen